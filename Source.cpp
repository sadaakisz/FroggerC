// Alpha v3.0.cpp
//Marcelo Martínez y Hector Suzuki

#include <iostream>
#include <ctime>
#include <conio.h>
#include <Windows.h>
#include <string> //Arreglos
#pragma comment(lib, "user32.lib") //Dependencia adicional para HWND
using namespace std;
using namespace System;

//Colores
// 0 = Negro
// 1 = Azul
// 2 = Verde
// 3 = Aguamarina
// 4 = Rojo
// 5 = Purpura
// 6 = Amarillo
// 7 = Blanco
// 8 = Gris
// 9 = Azul claro
// 10 = Verde claro
// 11 = Aguamarina claro
// 12 = Rojo claro
// 13 = Purpura claro
// 14 = Amarillo claro
// 15 = Blanco brillante

//Mapas 1-8
const int m1[37][54] = { { 3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11 },
{ 11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3,11,3 },
{ 3,11,3,11,3,0,0,0,0,11,3,11,3,11,3,0,0,0,0,11,3,11,3,11,3,0,0,0,0,11,3,11,3,11,3,0,0,0,0,11,3,11,3,11,3,0,0,0,0,11,3,11,3,11 },
{ 11,3,11,3,11,0,0,0,0,3,11,3,11,3,11,0,0,0,0,3,11,3,11,3,11,0,0,0,0,3,11,3,11,3,11,0,0,0,0,3,11,3,11,3,11,0,0,0,0,3,11,3,11,3 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m2[37][54] = { { 11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2 },
{ 2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11,2,11 },
{ 11,2,11,2,11,0,0,0,0,2,11,2,11,2,11,0,0,0,0,2,11,2,11,2,11,0,0,0,0,2,11,2,11,2,11,0,0,0,0,2,11,2,11,2,11,0,0,0,0,2,11,2,11,2 },
{ 2,11,2,11,2,0,0,0,0,11,2,11,2,11,2,0,0,0,0,11,2,11,2,11,2,0,0,0,0,11,2,11,2,11,2,0,0,0,0,11,2,11,2,11,2,0,0,0,0,11,2,11,2,11 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m3[37][54] = { { 2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10 },
{ 10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2,10,2 },
{ 2,10,2,10,2,0,0,0,0,10,2,10,2,10,2,0,0,0,0,10,2,10,2,10,2,0,0,0,0,10,2,10,2,10,2,0,0,0,0,10,2,10,2,10,2,0,0,0,0,10,2,10,2,10 },
{ 10,2,10,2,10,0,0,0,0,2,10,2,10,2,10,0,0,0,0,2,10,2,10,2,10,0,0,0,0,2,10,2,10,2,10,0,0,0,0,2,10,2,10,2,10,0,0,0,0,2,10,2,10,2 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m4[37][54] = { { 10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6 },
{ 6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10,6,10 },
{ 10,6,10,6,10,0,0,0,0,6,10,6,10,6,10,0,0,0,0,6,10,6,10,6,10,0,0,0,0,6,10,6,10,6,10,0,0,0,0,6,10,6,10,6,10,0,0,0,0,6,10,6,10,6 },
{ 6,10,6,10,6,0,0,0,0,10,6,10,6,10,6,0,0,0,0,10,6,10,6,10,6,0,0,0,0,10,6,10,6,10,6,0,0,0,0,10,6,10,6,10,6,0,0,0,0,10,6,10,6,10 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m5[37][54] = { { 6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14 },
{ 14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6,14,6 },
{ 6,14,6,14,6,0,0,0,0,14,6,14,6,14,6,0,0,0,0,14,6,14,6,14,6,0,0,0,0,14,6,14,6,14,6,0,0,0,0,14,6,14,6,14,6,0,0,0,0,14,6,14,6,14 },
{ 14,6,14,6,14,0,0,0,0,6,14,6,14,6,14,0,0,0,0,6,14,6,14,6,14,0,0,0,0,6,14,6,14,6,14,0,0,0,0,6,14,6,14,6,14,0,0,0,0,6,14,6,14,6 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m6[37][54] = { { 14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12 },
{ 12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14 },
{ 14,12,14,12,14,0,0,0,0,12,14,12,14,12,14,0,0,0,0,12,14,12,14,12,14,0,0,0,0,12,14,12,14,12,14,0,0,0,0,12,14,12,14,12,14,0,0,0,0,12,14,12,14,12 },
{ 12,14,12,14,12,0,0,0,0,14,12,14,12,14,12,0,0,0,0,14,12,14,12,14,12,0,0,0,0,14,12,14,12,14,12,0,0,0,0,14,12,14,12,14,12,0,0,0,0,14,12,14,12,14 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m7[37][54] = { { 12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4 },
{ 4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12,4,12 },
{ 12,4,12,4,12,0,0,0,0,4,12,4,12,4,12,0,0,0,0,4,12,4,12,4,12,0,0,0,0,4,12,4,12,4,12,0,0,0,0,4,12,4,12,4,12,0,0,0,0,4,12,4,12,4 },
{ 4,12,4,12,4,0,0,0,0,12,4,12,4,12,4,0,0,0,0,12,4,12,4,12,4,0,0,0,0,12,4,12,4,12,4,0,0,0,0,12,4,12,4,12,4,0,0,0,0,12,4,12,4,12 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const int m8[37][54] = { { 14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15 },
{ 15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14 },
{ 14,15,14,15,14,0,0,0,0,15,14,15,14,15,14,0,0,0,0,15,14,15,14,15,14,0,0,0,0,15,14,15,14,15,14,0,0,0,0,15,14,15,14,15,14,0,0,0,0,15,14,15,14,15 },
{ 15,14,15,14,15,0,0,0,0,14,15,14,15,14,15,0,0,0,0,14,15,14,15,14,15,0,0,0,0,14,15,14,15,14,15,0,0,0,0,14,15,14,15,14,15,0,0,0,0,14,15,14,15,14 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9 },
{ 9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };

//Caracteres
char BLK = 219; // Bloque
char I1 = 202; // ­Cabeza de rana
char I2 = 240; // ­­­­Doble guión
char CL = 174; // Direccional izquierda
char CR = 175; // Direccional derecha
char AL = 191; // Esquina izquierda
char AR = 192; // Esquina derecha

int Vidas = 3;
int Puntos = 0;
double Tiempo = 10000; //En milisegundos


void Ca(double s); //Función base para correr el juego
				   //Inicializador
void Consola(int ancho, int alto) {
	HWND consola = GetConsoleWindow(); //Tamaño de consola
	RECT r;
	GetWindowRect(consola, &r);
	MoveWindow(consola, r.left, r.top, ancho, alto, TRUE);
	CONSOLE_CURSOR_INFO(curInfo);
	GetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &curInfo); //Ocultar cursor
	curInfo.bVisible = 0;
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &curInfo);
	SetConsoleOutputCP(437); //ASCII Extendido
	srand(time(NULL)); //Aleatorios Activado
}
//Colores
void Col(int c) {
	HANDLE color = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(color, c);
}
//Cursor (gotoxy)
void Cur(int x, int y) {
	HANDLE ventana = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD posicion;
	posicion.X = x, posicion.Y = y;
	SetConsoleCursorPosition(ventana, posicion);
}
//Impresion del mapa
void Mapa(int l) {
	Cur(0, 0);
	for (int j = 0; j < 37; j++)
	{
		for (int i = 0; i < 54; i++)
		{
			switch (l)
			{
			case 1: Col(m1[j][i]); break;
			case 2: Col(m2[j][i]); break;
			case 3: Col(m3[j][i]); break;
			case 4: Col(m4[j][i]); break;
			case 5: Col(m5[j][i]); break;
			case 6: Col(m6[j][i]); break;
			case 7: Col(m7[j][i]); break;
			case 8: Col(m8[j][i]); break;
			default: break;
			}
			cout << BLK;
		}
		cout << endl;
	}
}
//Menú principal
void Menu() {
	char s = NULL;
	//Presentación Estética
	Cur(6, 3), Col(4), cout << "    ______                                  " << endl;
	Cur(6, 4), Col(13), cout << "   / ____/________  ____ _____ ____  _____ ++" << endl;
	Cur(6, 5), Col(1), cout << "  / /_  / ___/ __ \\/ __ `/ __ `/ _ \\/ ___/" << endl;
	Cur(6, 6), Col(9), cout << " / __/ / /  / /_/ / /_/ / /_/ /  __/ /		" << endl;
	Cur(6, 7), Col(3), cout << "/_/   /_/   \\____/\\__, /\\__, /\\___/_/   " << endl;
	Cur(6, 8), Col(11), cout << "                 /____//____/              " << endl;
	//Menú Estético
	Cur(11, 18), Col(2), cout << "_________________________________";
	Cur(13, 20), Col(6), cout << "Presione Enter para comenzar!";
	Cur(11, 21), Col(12), cout << "_________________________________";
	Cur(9, 33), Col(14), cout << "C++, Hector Suzuki y Marcelo Martinez.";
	s = 0;
	s = _getch();
	if (s == 13) //Enter
		Ca(1);
}
//Pantalla final
void GameOver() {
	system("cls");
	Cur(1, 13), Col(4), cout << "   ______                        ____                 " << endl;
	Cur(1, 14), Col(13), cout << "  / ____/___ _____ ___  ___     / __ \\_   _____  _____" << endl;
	Cur(1, 15), Col(1), cout << " / / __/ __ `/ __ `__ \\/ _ \\   / / / / | / / _ \\/ ___/" << endl;
	Cur(1, 16), Col(3), cout << "/ /_/ / /_/ / / / / / /  __/  / /_/ /| |/ /  __/ /    " << endl;
	Cur(1, 17), Col(11), cout << "\\____/\\__,_/_/ /_/ /_/\\___/   \\____/ |___/\\___/_/     " << endl;
	Col(2);
	for (int i = 2; i <= 52; i++)
		Col(10), Cur(i, 19), cout << "_", Col(11), Cur(i, 20), cout << "/", Sleep(50);
	Vidas = 3; //Reinicio de vidas
	Sleep(2000), system("cls");
}
//Comodín
struct Bonus
{
	int p, r; //Coordenadas
	int c = 0; //Limitador de veces en un nivel
	void Generar() {
		p = 2 * (2 + rand() % (26)); //Dentro del mapa
		r = 2 * (1 + rand() % (14));
	}
	void R() {
		if (c == 0) {
			Col(5), Cur(p, r), cout << BLK; //Bloque púrpura
			Cur(p + 1, r), cout << BLK;
			Cur(p, r + 1), cout << BLK;
			Cur(p + 1, r + 1), cout << BLK;
		}
	}
}Extra;
struct C1 {
	int a = 54, b = 20, i = 54; //Posiciones iniciales
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK; //Borrado
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 0) a = i; //Reinicio de posición
		a -= 1; //Movimiento
		Col(12), Cur(a, b), cout << I2; //Impresión
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca1;
struct C2 {
	int a = 0, b = 22, i = 0; //Posiciones iniciales
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK; //Borrado
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 52) a = i; //Reinicio de posición
		a += 1; //Movimiento
		Col(12), Cur(a, b), cout << I2; //Impresión
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca2;
struct C3 {
	int a = 54, b = 24, i = 54;
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 0) a = i;
		a -= 1;
		Col(12), Cur(a, b), cout << I2;
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca3;
struct C4 {
	int a = 0, b = 26, i = 0;
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 52) a = i;
		a += 1;
		Col(12), Cur(a, b), cout << I2;
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca4;
struct C5 {
	int a = 54, b = 28, i = 54;
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 0) a = i;
		a -= 1;
		Col(12), Cur(a, b), cout << I2;
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca5;
struct C6 {
	int a = 0, b = 30, i = 0;
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 52) a = i;
		a += 1;
		Col(12), Cur(a, b), cout << I2;
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca6;
struct C7 {
	int a = 0, b = 32, i = 0;
	void R() {
		if (a != i)
		{
			Col(0), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
		if (a == 52) a = i;
		a += 1;
		Col(12), Cur(a, b), cout << I2;
		Cur(a + 1, b), cout << I2;
		Cur(a, b + 1), cout << I2;
		Cur(a + 1, b + 1), cout << I2;
	}
}Ca7;
struct T1
{
	int a = -1, b = 4, i = -1; //Posiciones iniciales
	void R() {
		if (a != i && a >= i + 9 && a - 9 <= 52)
		{
			Col(m1[b][a - 8]), Cur(a - 8, b), cout << BLK;  //Borrado
			Col(m1[b][a - 9]), Cur(a - 9, b), cout << BLK;
			Col(m1[b + 1][a - 8]), Cur(a - 8, b + 1), cout << BLK;
			Col(m1[b + 1][a - 9]), Cur(a - 9, b + 1), cout << BLK;
		}
		if (a == 62) a = i; //Reinicio de posición
		a += 1; //Movimiento
		if (a >= 0 && a <= 52)
		{
			Col(6), Cur(a, b), cout << BLK; //Impresión
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr1;
struct T2
{
	int a = 54, b = 6, i = 54;
	void R() {
		if (a != i && a <= i - 8 && a + 8 <= 52)
		{
			Col(m1[b][a + 8]), Cur(a + 8, b), cout << BLK;
			Col(m1[b][a + 9]), Cur(a + 9, b), cout << BLK;
			Col(m1[b + 1][a + 8]), Cur(a + 8, b + 1), cout << BLK;
			Col(m1[b + 1][a + 9]), Cur(a + 9, b + 1), cout << BLK;
			if (a % 17 == 0 && a != 0) {
				Col(m1[b][a]), Cur(a, b), cout << BLK;
				Col(m1[b][a + 1]), Cur(a + 1, b), cout << BLK;
				Col(m1[b][a + 2]), Cur(a + 2, b), cout << BLK;
				Col(m1[b][a + 3]), Cur(a + 3, b), cout << BLK;
				Col(m1[b][a + 4]), Cur(a + 4, b), cout << BLK;
				Col(m1[b][a + 5]), Cur(a + 5, b), cout << BLK;
				Col(m1[b][a + 6]), Cur(a + 6, b), cout << BLK;
				Col(m1[b][a + 7]), Cur(a + 7, b), cout << BLK;
				Col(m1[b + 1][a]), Cur(a, b), cout << BLK;
				Col(m1[b + 1][a + 1]), Cur(a + 1, b + 1), cout << BLK;
				Col(m1[b + 1][a + 2]), Cur(a + 2, b + 1), cout << BLK;
				Col(m1[b + 1][a + 3]), Cur(a + 3, b + 1), cout << BLK;
				Col(m1[b + 1][a + 4]), Cur(a + 4, b + 1), cout << BLK;
				Col(m1[b + 1][a + 5]), Cur(a + 5, b + 1), cout << BLK;
				Col(m1[b + 1][a + 6]), Cur(a + 6, b + 1), cout << BLK;
				Col(m1[b + 1][a + 7]), Cur(a + 7, b + 1), cout << BLK;
			}
		}
		if (a == -8) a = i;
		a -= 1;
		if (a >= 0 && a <= 52 && a != 32 && a != 15)
		{
			Col(10), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr2;
struct T3
{
	int a = -1, b = 8, i = -1;
	void R() {
		if (a != i && a >= i + 9 && a - 9 <= 52)
		{
			Col(m1[b][a - 8]), Cur(a - 8, b), cout << BLK;
			Col(m1[b][a - 9]), Cur(a - 9, b), cout << BLK;
			Col(m1[b + 1][a - 8]), Cur(a - 8, b + 1), cout << BLK;
			Col(m1[b + 1][a - 9]), Cur(a - 9, b + 1), cout << BLK;
		}
		if (a == 62) a = i;
		a += 1;
		if (a >= 0 && a <= 52)
		{
			Col(6), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr3;
struct T4
{
	int a = 54, b = 10, i = 54, c = 0;
	void R() {
		if (a != i && a <= i - 8 && a + 8 <= 52)
		{
			c = 0;
			Col(m1[b][a + 8]), Cur(a + 8, b), cout << BLK;
			Col(m1[b][a + 9]), Cur(a + 9, b), cout << BLK;
			Col(m1[b + 1][a + 8]), Cur(a + 8, b + 1), cout << BLK;
			Col(m1[b + 1][a + 9]), Cur(a + 9, b + 1), cout << BLK;
			if (a % 16 == 0 && a != 0) {
				Col(m1[b][a]), Cur(a, b), cout << BLK;
				Col(m1[b][a + 1]), Cur(a + 1, b), cout << BLK;
				Col(m1[b][a + 2]), Cur(a + 2, b), cout << BLK;
				Col(m1[b][a + 3]), Cur(a + 3, b), cout << BLK;
				Col(m1[b][a + 4]), Cur(a + 4, b), cout << BLK;
				Col(m1[b][a + 5]), Cur(a + 5, b), cout << BLK;
				Col(m1[b][a + 6]), Cur(a + 6, b), cout << BLK;
				Col(m1[b][a + 7]), Cur(a + 7, b), cout << BLK;
				Col(m1[b + 1][a]), Cur(a, b), cout << BLK;
				Col(m1[b + 1][a + 1]), Cur(a + 1, b + 1), cout << BLK;
				Col(m1[b + 1][a + 2]), Cur(a + 2, b + 1), cout << BLK;
				Col(m1[b + 1][a + 3]), Cur(a + 3, b + 1), cout << BLK;
				Col(m1[b + 1][a + 4]), Cur(a + 4, b + 1), cout << BLK;
				Col(m1[b + 1][a + 5]), Cur(a + 5, b + 1), cout << BLK;
				Col(m1[b + 1][a + 6]), Cur(a + 6, b + 1), cout << BLK;
				Col(m1[b + 1][a + 7]), Cur(a + 7, b + 1), cout << BLK;
				c++;
			}
		}
		if (a == -8) a = i;
		a -= 1;
		if (a >= 0 && a <= 52 && a != 30 && a != 14)
		{
			Col(10), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr4;
struct T5
{
	int a = -1, b = 12, i = -1;
	void R() {
		if (a != i && a >= i + 9 && a - 9 <= 52)
		{
			Col(m1[b][a - 8]), Cur(a - 8, b), cout << BLK;
			Col(m1[b][a - 9]), Cur(a - 9, b), cout << BLK;
			Col(m1[b + 1][a - 8]), Cur(a - 8, b + 1), cout << BLK;
			Col(m1[b + 1][a - 9]), Cur(a - 9, b + 1), cout << BLK;
		}
		if (a == 62) a = i;
		a += 1;
		if (a >= 0 && a <= 52)
		{
			Col(6), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr5;
struct T6
{
	int a = 54, b = 14, i = 54;
	void R() {
		if (a != i && a <= i - 8 && a + 8 <= 52)
		{
			Col(m1[b][a + 8]), Cur(a + 8, b), cout << BLK;
			Col(m1[b][a + 9]), Cur(a + 9, b), cout << BLK;
			Col(m1[b + 1][a + 8]), Cur(a + 8, b + 1), cout << BLK;
			Col(m1[b + 1][a + 9]), Cur(a + 9, b + 1), cout << BLK;
		}
		if (a == -8) a = i;
		a -= 1;
		if (a >= 0 && a <= 52)
		{
			Col(6), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr6;
struct T7
{
	int a = -1, b = 16, i = -1;
	void R() {
		if (a != i && a >= i + 9 && a - 9 <= 52)
		{
			Col(m1[b][a - 8]), Cur(a - 8, b), cout << BLK;
			Col(m1[b][a - 9]), Cur(a - 9, b), cout << BLK;
			Col(m1[b + 1][a - 8]), Cur(a - 8, b + 1), cout << BLK;
			Col(m1[b + 1][a - 9]), Cur(a - 9, b + 1), cout << BLK;
		}
		if (a == 62) a = i;
		a += 1;
		if (a >= 0 && a <= 52)
		{
			Col(6), Cur(a, b), cout << BLK;
			Cur(a + 1, b), cout << BLK;
			Cur(a, b + 1), cout << BLK;
			Cur(a + 1, b + 1), cout << BLK;
		}
	}
}Tr7;
struct R1 {
	int x = 26, y = 34, c = 0, xi = 26, yi = 34; //Coordenadas de inicio , x = par
	int Slot1 = 0, Slot2 = 0, Slot3 = 0, Slot4 = 0, Slot5 = 0; //Casas
	char key = NULL;
	void B() {
		if (x == Extra.p && y == Extra.r) //Comodín
		{
			Puntos += 1000;
			Vidas += 1;
			Col(m1[y][x]), Cur(x, y), cout << BLK;
			Col(m1[y][x + 1]), Cur(x + 1, y), cout << BLK;
			Col(m1[y + 1][x]), Cur(x, y + 1), cout << BLK;
			Col(m1[y + 1][x + 1]), Cur(x + 1, y + 1), cout << BLK;
			Extra.p = 52, Extra.r = 20;
			Col(0), Cur(Extra.p, Extra.r), cout << BLK; //Borrado
			Col(0), Cur(Extra.p + 1, Extra.r), cout << BLK;
			Col(0), Cur(Extra.p, Extra.r + 1), cout << BLK;
			Col(0), Cur(Extra.p + 1, Extra.r + 1), cout << BLK;
			Extra.c = 1;
		}
		if (x <= Tr7.a - 1 && x >= Tr7.a - 9 && y == Tr7.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(6), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else if (x >= Tr6.a && x <= Tr6.a + 9 && y == Tr6.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(6), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else if (x <= Tr5.a - 1 && x >= Tr5.a - 9 && y == Tr5.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(6), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else if (x >= Tr4.a && x <= Tr4.a + 9 && y == Tr4.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(10), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else if (x <= Tr3.a - 1 && x >= Tr3.a - 9 && y == Tr3.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(6), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else if (x >= Tr2.a && x <= Tr2.a + 9 && y == Tr2.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(10), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else if (x <= Tr1.a - 1 && x >= Tr1.a - 9 && y == Tr1.b) //Pintado de troncos cuando la rana se mueve
		{
			Col(6), Cur(x, y), cout << BLK;
			Cur(x + 1, y), cout << BLK;
			Cur(x, y + 1), cout << BLK;
			Cur(x + 1, y + 1), cout << BLK;
		}
		else //Borrado de la rana
		{
			Col(m1[y][x]), Cur(x, y), cout << BLK;
			Col(m1[y][x + 1]), Cur(x + 1, y), cout << BLK;
			Col(m1[y + 1][x]), Cur(x, y + 1), cout << BLK;
			Col(m1[y + 1][x + 1]), Cur(x + 1, y + 1), cout << BLK;
		}
	}
	void P() { //Pintado de la rana

		Col(10), Cur(x, y), cout << I1;
		Cur(x + 1, y), cout << I1;
		Cur(x, y + 1), cout << I2;
		Cur(x + 1, y + 1), cout << I2;

	}
	void Puntaje() {
		if (y == 2 && x == 6 && Slot1 == 0) P(), x = xi, y = yi, P(), Slot1 = 1, Puntos += 1000;
		if (y == 2 && x == 16 && Slot2 == 0) P(), x = xi, y = yi, P(), Slot2 = 1, Puntos += 1000;
		if (y == 2 && x == 26 && Slot3 == 0) P(), x = xi, y = yi, P(), Slot3 = 1, Puntos += 1000;
		if (y == 2 && x == 36 && Slot4 == 0) P(), x = xi, y = yi, P(), Slot4 = 1, Puntos += 1000;
		if (y == 2 && x == 46 && Slot5 == 0) P(), x = xi, y = yi, P(), Slot5 = 1, Puntos += 1000;
		if (Puntos == 10000) Vidas++;
	}
	void R() { //Movimiento y pintado
		B(); //Borrar
		key = _getch();
		if (key == 72) y -= 2;
		else if (key == 80) y += 2;
		else if (key == 77) x += 2;
		else if (key == 75) x -= 2;

		if (0 < x&&x < 52 && 3 < y&&y < 36) P(); //Pintar
		else {
			if (Slot1 == 1 && y == 2 && x == 6) y = 4;
			else if (Slot2 == 1 && y == 2 && x == 16) y = 4;
			else if (Slot3 == 1 && y == 2 && x == 26) y = 4;
			else if (Slot4 == 1 && y == 2 && x == 36) y = 4;
			else if (Slot5 == 1 && y == 2 && x == 46) y = 4;
			if (y == 2 && x % 10 != 6) y = 4; //Restricción de movimiento superior
			else if (y <= 0) y = 2;
			else if (y >= 36) y = 34;
			else if (x <= 0) x = 2;
			else if (x >= 52) x = 50;
			P(); //Pintar
			Puntaje(); //Inicialización de puntaje
		}
	}
}Ra;
void Res() {
	Ra.B(), Ra.x = Ra.xi, Ra.y = Ra.yi, Ra.P(), Vidas--; //Reinicio por muerte de la rana
}
void Colision() {
	if (Ra.y == Ca1.b) //Condiciones de muerte en la carretera
		if (Ca1.a - 2 <= Ra.x&&Ra.x <= Ca1.a + 1) Res(), Ca1.R();
	if (Ra.y == Ca2.b)
		if (Ca2.a - 1 <= Ra.x&&Ra.x <= Ca2.a + 1) Res(), Ca2.R();
	if (Ra.y == Ca3.b)
		if (Ca3.a - 1 <= Ra.x&&Ra.x <= Ca3.a + 1) Res(), Ca3.R();
	if (Ra.y == Ca4.b)
		if (Ca4.a - 1 <= Ra.x&&Ra.x <= Ca4.a + 1) Res(), Ca4.R();
	if (Ra.y == Ca5.b)
		if (Ca5.a - 1 <= Ra.x&&Ra.x <= Ca5.a + 1) Res(), Ca5.R();
	if (Ra.y == Ca6.b)
		if (Ca6.a - 1 <= Ra.x&&Ra.x <= Ca6.a + 1) Res(), Ca6.R();
	if (Ra.y == Ca7.b)
		if (Ca7.a - 1 <= Ra.x&&Ra.x <= Ca7.a + 1) Res(), Ca7.R();
}
void InvColision() {
	if (Ra.y == Tr1.b) //Condiciones de muerte en el río
		if (Tr1.a - 9 >= Ra.x || Ra.x >= Tr1.a + 1) Res(), Tr1.R();
	if (Ra.y == Tr2.b)
		if (Tr2.a - 1 >= Ra.x || Ra.x >= Tr2.a + 9) Res(), Tr2.R();
	if (Ra.y == Tr3.b)
		if (Tr3.a - 9 >= Ra.x || Ra.x >= Tr3.a + 1) Res(), Tr3.R();
	if (Ra.y == Tr4.b)
		if (Tr4.a - 1 >= Ra.x || Ra.x >= Tr4.a + 9) Res(), Tr4.R();
	if (Ra.y == Tr5.b)
		if (Tr5.a - 9 >= Ra.x || Ra.x >= Tr5.a + 1) Res(), Tr5.R();
	if (Ra.y == Tr6.b)
		if (Tr6.a - 1 >= Ra.x || Ra.x >= Tr6.a + 9) Res(), Tr6.R();
	if (Ra.y == Tr7.b)
		if (Tr7.a - 9 >= Ra.x || Ra.x >= Tr7.a + 1) Res(), Tr7.R();
}
void Display(int l) {
	Cur(44, 36); //Contadores visuales de vidas, etc.
	switch (l)
	{
	case 1: Col(4); break;
	case 2: Col(13); break;
	case 3: Col(5); break;
	case 4: Col(9); break;
	case 5: Col(3); break;
	case 6: Col(11); break;
	case 7: Col(10); break;
	case 8: Col(15); break;
	default: break;
	}
	cout << " _Level: " << l;
	Cur(1, 36), cout << AL << " " << Vidas << " " << AR;
	Cur(23, 36), cout << CR << " " << Puntos << " " << CL;
	Cur(52, 18), cout << (int)Tiempo / 100;
}
void Ca(double s) {
	Mapa(s);
	int spd = 1;
	int timeco = 1;
	if (spd == 10000) spd = 1; //Contador de velocidad absoluto
	Ra.P();
	Extra.Generar();
	while (1) {
		if (Vidas <= 0 || Tiempo <= 0) {
			GameOver(); break; Menu();
		}
		spd++;
		Tiempo -= 1.5;
		InvColision();
		Ra.P();
		Extra.R(); //Inicializado de comodín
		Cur(0, 0), Cur(0, 36), Cur(54, 36); //Bug Fixer
		if (spd % 10 == 0) Ca1.R(), Sleep(135 - (15 * s)); //Velocidad relativa según nivel
		if (spd % 15 == rand() % 2) Ca2.R();
		if (spd % 12 == 0) Ca3.R();
		if (spd % 15 == rand() % 2) Ca4.R();
		if (spd % 7 == 0) Ca5.R();
		if (spd % 13 == rand() % 2) Ca6.R();
		if (spd % 10 == 0) Ca7.R();
		if (spd % 19 == 0) Tr1.R();
		if (spd % 26 == 0) Tr2.R();
		if (spd % 14 == 0) Tr3.R();
		if (spd % 18 == rand() % 2) Tr4.R();
		if (spd % 22 == 0) Tr5.R();
		if (spd % 18 == rand() % 2) Tr6.R();
		if (spd % 10 == 0) Tr7.R();
		if (_kbhit()) Ra.R(); //Rana
		Colision();
		if (Ra.Slot1 == 1 && Ra.Slot2 == 1 && Ra.Slot3 == 1 && Ra.Slot4 == 1 && Ra.Slot5 == 1) {
			if (s <= 8) {
				Extra.c = 0, s++, Mapa(s), Ca1.R(), Ca2.R(), Ca3.R(), Ca4.R(), Ca5.R(), Ca6.R(), Ca7.R(), Ra.P(); //Inicialización Próximo Nivel
				Ra.Slot1 = 0, Ra.Slot2 = 0, Ra.Slot3 = 0, Ra.Slot4 = 0, Ra.Slot5 = 0; //Reinicio de slots
			}
		}
		Display(s);
	}
}
int main()
{
	Consola(473, 632);
	while (1)
		Menu();
	return 0;
}
